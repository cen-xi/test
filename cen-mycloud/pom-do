<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，
    这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。-->
    <modelVersion>4.0.0</modelVersion>
    <!--    <parent>-->
    <!--        &lt;!&ndash;被继承的父项目的构件标识符&ndash;&gt;-->
    <!--        <groupId>org.springframework.boot</groupId>-->
    <!--        &lt;!&ndash;被继承的父项目的全球唯一标识符&ndash;&gt;-->
    <!--        <artifactId>spring-boot-starter-parent</artifactId>-->
    <!--        &lt;!&ndash;        spring boot 的版本号&ndash;&gt;-->
    <!--        &lt;!&ndash;被继承的父项目的版本&ndash;&gt;-->
    <!--        <version>2.3.0.RELEASE</version>-->
    <!--        &lt;!&ndash; 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。-->
    <!--        默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项 目的pom，-->
    <!--        其次在文件系统的这个位置（relativePath位置），然后在本地仓库，-->
    <!--        最后在远程仓库寻找父项目的pom。&ndash;&gt;-->
    <!--        <relativePath/> &lt;!&ndash; lookup parent from repository &ndash;&gt;-->
    <!--    </parent>-->
    <!--    &lt;!&ndash;        可不用这个方式&ndash;&gt;-->

    <groupId>cen.cloud</groupId>
    <artifactId>cen-mycloud</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>cen-mycloud</name>
    <description>Demo project for Spring Boot</description>
    <!--	//打包方式-->
    <packaging>pom</packaging>


    <properties>
        <!--指定Maven用什么编码来读取源码及文档 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!--指定Maven用什么编码来呈现站点的HTML文件 -->
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <junit.version>4.12</junit.version>
        <log4j.version>1.2.17</log4j.version>
        <lombok.version>1.16.18</lombok.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!--进行项目依赖版本通过一管理-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Dalston.SR1</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--进行项目依赖版本通过一管理-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>1.5.9.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.0.4</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>1.0.31</version>
            </dependency>

            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>1.3.0</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-core</artifactId>
                <version>1.2.3</version>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <finalName>microservicecloud</finalName>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <configuration>
                    <delimiters>
                        <delimit>$</delimit>
                    </delimiters>
                </configuration>
            </plugin>
        </plugins>
    </build>



    <!--	指出子模块的artifactId，有多少个子maven这里就有多少个<module>-->
    <modules>
        <module>eureka-7001</module>
    </modules>

</project>
